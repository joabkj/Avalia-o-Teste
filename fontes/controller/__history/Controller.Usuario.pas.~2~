unit Controller.Usuario;

interface

uses
  System.SysUtils, StdCtrls, Data.DB,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, Web.HTTPApp,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  System.Rtti, System.Classes,

  Controller.Connection;

 type
    TControllerUsuario = class
 private
   FIDUsuario   : Integer;
   FNomeUsuario : string;
 public
    property  IDUsuario  : Integer read FIDUsuario write FIDUsuario;
    property  NomeUsuario: String read FNomeUsuario write FNomeUsuario;
    constructor Create;
    destructor Destroy; override;
    function  ValidaUsuario(AUsuario, ASenha: String): Boolean;
end;

  var
    dsUsuarios  : TDataSource;

implementation

{ TUsuarios }

constructor TControllerUsuario.Create;
begin
  inherited;
end;

destructor TControllerUsuario.Destroy;
begin
   inherited;
end;


function TControllerUsuario.ValidaUsuario(AUsuario, ASenha: String): Boolean;
var
 _Sql: String;
 _Usuario: String;
 _Senha  : String;
 ExecutaScripts: TFDQuery;
begin
  result:= false;

  ExecutaScripts:= TFDQuery.create(nil);
  ExecutaScripts.Connection := TConnection.GetInstance.Conexao;
  ExecutaScripts.SQL.Clear;
  ExecutaScripts.SQL.Add('SELECT * FROM usuario WHERE usuario =:usuario and senha =:senha ');
  ExecutaScripts.open;

  if not ExecutaScripts.IsEmpty then
  begin
    Result:= true;
    FIDUsuario  := ExecutaScripts.fieldByname('id_usuario').asinteger;
    FNomeUsuario:= ExecutaScripts.fieldByname('nome').asstring;
  end;




end;


end.

